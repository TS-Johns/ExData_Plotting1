?read.table
tmpdata <- read.table("..\Data\household_power_consumption.txt", header = TRUE, sep=";", colClasses = c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
tmpdata <- read.table("../Data/household_power_consumption.txt", header = TRUE, sep=";", colClasses = c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
tmpdata <- read.table("../Data/household_power_consumption.txt", header = TRUE, sep=";")
str(tmpdata)
names(tmpdata)
?read.table
tmpdata <- read.table("../Data/household_power_consumption.txt", header = TRUE, sep=";", colClasses = c("character","character","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
tmpdata <- read.table("../Data/household_power_consumption.txt", header = TRUE, sep=";", stringsAsFactors=FALSE, check.names=FALSE)
str(tmpdata)
subsetData <- subset(tmpdata, Date == "01/02/2007" | Date == "02/02/2007")
head(tmpdata)
head(tmpdata, 500)
subsetData <- subset(tmpdata, Date == "1/2/2007" | Date == "2/2/2007")
head(subsetData)
?hist
hist(as.numeric(subsetData$Global_active_power))
clear(tmpdata)
remove(tmpdata)
subset$Global_active_power <- as.numeric(subset$Global_active_power)
hist(as.numeric(subsetData$Global_active_power))
hist(as.numeric(subsetData$Global_active_power), col="red")
hist(as.numeric(subsetData$Global_active_power), col="red", xlabel="GGG")
hist(as.numeric(subsetData$Global_active_power), col="red", xlab="GGG")
## ----------------------------------- Step 01: Set Variables -----------------------------------
dataFilePathName <- "../Data/household_power_consumption.txt"
# Note: Date oiginally read in as character in d/m/yyyy format, using that format to isolate desired data
dateStart <- "1/2/2007"
dateEnd <- "2/2/2007"
## ----------------------------------- Step 02: Load & Get Data to Plot -----------------------------------
baseData <- read.table(dataFilePathName, header = TRUE, sep=";", stringsAsFactors=FALSE, check.names=FALSE)
plotData <- baseData[baseData$Date == dateStart | baseData$Date == dateEnd,]   #Limit to desired dates - using OR and character equality not date ranges, since we only need data for 2 dates
str(plotData)
plotData$Voltage <- as.numeric(plotData$Voltage)
str(plotData)
head(plotData)
names(plotData)
?read.table
?as.date
?as.Date
as.Date(head(plotData$Datae, 50), format = "%d/%m/%Y")
as.Date(head(plotData$Date, 50), format = "%d/%m/%Y")
as.Date(tail(plotData$Date, 50), format = "%d/%m/%Y")
?strptime
strptime(tail(plotData$Time, 50), format = "%d/%m/%Y")
strptime(tail(plotData$Time, 50)
)
strptime(tail(plotData$Time, 50))
strptime(tail(plotData$Time, 50), format="")
strptime(tail(plotData$Time, 50), format="%H")
?paste
strptime(tail(paste(plotData$Date, plotData$Time, sep=" "), 50), format="%H")
tail(paste(plotData$Date, plotData$Time, sep=" "), 50)
?strpdate
?strp
as.POSIXct(tail(paste(plotData$Date, plotData$Time, sep=" "), 50))
as.POSIXct(tail(paste("2007-02-02", plotData$Time, sep=" "), 50))
as.POSIXct(head(paste("2007-02-01", plotData$Time, sep=" "), 50))
plotData$Orig_date <- plotData$Date
plotData$Date <- as.Date(plotData$Date, format = "%d/%m/%Y")
head(plotData)
as.character(head(plotData$Datae))
as.character(head(plotData$Date))
as.POSIXct(head(paste(as.character(plotData$Date), plotData$Time, sep=" "), 50))
head(plotData)
plotData$DateTime <- as.POSIXct(paste(as.character(plotData$Date), plotData$Time, sep=" "))
head(plotData)
plot(plotData$Global_active_power, type="l", xaxt="n")
axis.POSIXct(1, plotData$DateTime, format="%D")
?axis.POSIXct
axis.POSIXct(1, plotData$DateTime, format="%a")
?axis.POSIXct
strptime(plotData$DateTime, format="%a")
head(plotData$DateTime, 50)
?strptime
strptime(head(plotData$DateTime, 50), format="")
strptime(head(plotData$DateTime, 50), format="%a")
strptime(head(paste(as.character(plotData$Date), plotData$Time, sep=" "), 50), format="%a")
head(paste(as.character(plotData$Date), plotData$Time, sep=" "), 50)
strptime(head(paste(as.character(plotData$Date), plotData$Time, sep=" "), 50), format="%H")
plot(plotData$Global_active_power, type="l", xaxt="n")
axis.POSIXct(1, plotData$DateTime, format="%a")
?axis.POSIXct
?range
?axis.POSIXct
plot(plotData$DateTime, plotData$Global_active_power, type="l", xaxt="n")
axis.POSIXct(1, plotData$DateTime, format="%a")
plot(plotData$DateTime, plotData$Global_active_power, type="l", xaxt="n", col="red")
par(new=TRUE)
plot(plotData$Global_reactive_power, type="l", xaxt="n", yaxt="n", col="blue")
axis.POSIXct(1, plotData$DateTime, format="%a")
plot(plotData$Global_reactive_power, type="l", xaxt="n", yaxt="n", col="blue")
axis.POSIXct(1, plotData$DateTime, format="%a")
plot(plotData$DateTime, plotData$Global_active_power, type="l", xaxt="n", col="red")
axis.POSIXct(1, plotData$DateTime, format="%a")
par(new=TRUE)
plot(plotData$Global_reactive_power, type="l", xaxt="n", yaxt="n", col="blue")
plot(plotData$DateTime, plotData$Global_active_power, type="l", xaxt="n", col="red")
axis.POSIXct(1, plotData$DateTime, format="%a")
par(new=TRUE)
plot(plotData$Global_reactive_power, type="l", xaxt="n", yaxt="n", axes=FALSE, col="blue")
?plot
plot(plotData$Global_reactive_power, type="l", xaxt="n", yaxt="n", xlab="", ylab="", col="blue")
plot(plotData$DateTime, plotData$Global_active_power, type="l", xaxt="n", col="red")
axis.POSIXct(1, plotData$DateTime, format="%a")
plot(plotData$Global_reactive_power, type="l", xaxt="n", yaxt="n", xlab="", ylab="", col="blue")
plot(plotData$DateTime, plotData$Global_active_power, type="l", xaxt="n", col="red")
axis.POSIXct(1, plotData$DateTime, format="%a")
par(new=TRUE)
plot(plotData$Global_reactive_power, type="l", xaxt="n", yaxt="n", xlab="", ylab="", col="blue")
?legend
legend("topright",c("A","B"))
?legend
?legend
legend("topright",c("A","B"), lty=1)
legend("topright",c("A","B"), lty=1, col("black","blue"))
legend("topright",c("A","B"), lty=1, col = c("black","blue"))
plot(plotData$Global_reactive_power, type="l", xaxt="n", yaxt="n", xlab="", ylab="", col="blue")
legend("topright",c("A","B"), lty=1, col = c("black","blue"))
?png
png("../test.png", height= 480, width=480)
plot(plotData$Global_reactive_power, type="l", xaxt="n", yaxt="n", xlab="", ylab="", col="blue")
legend("topright",c("A","B"), lty=1, col = c("black","blue"))
dev.off()
clear()
remove()
remove(all)
remove("all")
## ----------------------------------- Step 01: Set Variables -----------------------------------
dataFilePathName <- "../Data/household_power_consumption.txt"
# Note: Date oiginally read in as character in d/m/yyyy format, using that format to isolate desired data
dateStart <- "1/2/2007"
dateEnd <- "2/2/2007"
plotFileName <- "plot1.png"
## ----------------------------------- Step 02: Load & Get Data to Plot -----------------------------------
baseData <- read.table(dataFilePathName, header = TRUE, sep=";",
na.strings="?", stringsAsFactors=FALSE, check.names=FALSE)
#Note - Make sue to handle NAs appropriately since encoded as ? in file
plotData <- baseData[baseData$Date == dateStart | baseData$Date == dateEnd,]   #Limit to desired dates - using OR and character equality not date ranges, since we only need data for 2 dates
# Remove larger table from memory
remove(baseData)
# Format columns within plotData since many initially read in as numeric
plotData$Global_active_power <- as.numeric(plotData$Global_active_power)
plotData$Global_reactive_power <- as.numeric(plotData$Global_reactive_power)
plotData$Global_intensity <- as.numeric(plotData$Global_intensity)
plotData$Voltage <- as.numeric(plotData$Voltage)
plotData$Sub_metering_1 <- as.numeric(plotData$Sub_metering_1)
plotData$Sub_metering_2 <- as.numeric(plotData$Sub_metering_2)
plotData$Sub_metering_3 <- as.numeric(plotData$Sub_metering_3)
# Next handle date columns as well
plotData$Orig_date <- plotData$Date
plotData$Date <- as.Date(plotData$Date, format = "%d/%m/%Y")
plotData$DateTime <- as.POSIXct(paste(as.character(plotData$Date), plotData$Time, sep=" "))
plotData
head(plotData)
tail(plotData)
hist(plotData$Global_active_power, col="red", main="Global Active Power",xlab="Global Active Power (kilowatts)")
## ----------------------------------- Step 03: Init Graphic Device -----------------------------------
png(plotFileName, width=480, height=480) #Create PNG with desired height & width (not 480x480 is default so did not need to specify)
## ----------------------------------- Step 04: Generate Plot -----------------------------------
hist(plotData$Global_active_power, col="red", main="Global Active Power",xlab="Global Active Power (kilowatts)")
## ----------------------------------- Step 05: Clean-Up -----------------------------------
dev.off()   #close active graphic device pointing to png file
plotFileName <- "plot2.png"
plot(plot$DateTime, plotData$Global_active_power, type="l", main="",xlab="", ylab="Global Active Power (kilowatts)")
plot(plotData$DateTime, plotData$Global_active_power, type="l", main="",xlab="", ylab="Global Active Power (kilowatts)")
plot(plotData$DateTime, plotData$Global_active_power, type="l",
main="",xlab="", ylab="Global Active Power (kilowatts)", xact="n")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     xact = "n" to force hiding of x-labels
# Note - x labels seemd to autodisplay to correct value
# However following code can be used to see any desired adte/time format
axis.POSIXct(1, plotData$DateTime, format="%a")
axis.POSIXct(1, plotData$DateTime, format="%A")
## ----------------------------------- Step 03: Init Graphic Device -----------------------------------
png(plotFileName, width=480, height=480) #Create PNG with desired height & width (not 480x480 is default so did not need to specify)
## ----------------------------------- Step 04: Generate Plot -----------------------------------
plot(plotData$DateTime, plotData$Global_active_power, type="l",
main="",xlab="", ylab="Global Active Power (kilowatts)", xaxt="n")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     xact = "n" to force hiding of x-labels
# Note - x labels seemd to autodisplay to correct value
# However following code can be used to see any desired adte/time format
axis.POSIXct(1, plotData$DateTime, format="%a")
## ----------------------------------- Step 05: Clean-Up -----------------------------------
dev.off()   #close active graphic device pointing to png file
plotFileName <- "plot3.png"
?par
plot(plotData$DateTime, plotData$Sub_metering_1, type="l",
main="",xlab="", ylab="Energy sub metering", xaxt="n")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     xact = "n" to force hiding of x-labels
# Note - x labels seemd to autodisplay to correct value
# However following code can be used to see any desired adte/time format
axis.POSIXct(1, plotData$DateTime, format="%a")
# Next we need to add additional plots - use par to suspend redrwaing plot
par(new=TRUE)
plot(plotData$Sub_metering_2, type="l", col="red",
main="",xlab="", ylab="", xaxt="n", yaxt="n")
plot(plotData$Sub_metering_3, type="l", col="blue",
main="",xlab="", ylab="", xaxt="n", yaxt="n")
plot(plotData$DateTime, plotData$Sub_metering_1, type="l",
main="",xlab="", ylab="Energy sub metering", xaxt="n")
axis.POSIXct(1, plotData$DateTime, format="%a")
par(new=TRUE)
plot(plotData$Sub_metering_2, type="l", col="red",
main="",xlab="", ylab="", xaxt="n", yaxt="n")
plot(plotData$DateTime, plotData$Sub_metering_1, type="l",
main="",xlab="", ylab="Energy sub metering", xaxt="n")
par(new=TRUE)
plot(plotData$Sub_metering_2, type="l", col="red",
main="",xlab="", ylab="", xaxt="n")
plot(plotData$DateTime, plotData$Sub_metering_1, plotData$Sub_metering_2, type="l",
main="",xlab="", ylab="Energy sub metering", xaxt="n")
?plot
?plot
?min
min(plotData$Sub_metering_1)
min(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
max(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
?plot
ymin <- min(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
ymax <- max(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
plot(plotData$DateTime, plotData$Sub_metering_1, type="l",
main="",xlab="", ylab="Energy sub metering", ylim=c(ymax, ymin), xaxt="n")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     xact = "n" to force hiding of x-labels
#     Plus set y range limits
# Note - x labels seemd to autodisplay to correct value
# However following code can be used to see any desired adte/time format
axis.POSIXct(1, plotData$DateTime, format="%a")
# Next we need to add additional plots - use par to suspend redrwaing plot
par(new=TRUE)
plot(plotData$Sub_metering_2, type="l", col="red",
main="",xlab="", ylab="",  ylim=c(ymax, ymin), xaxt="n", yaxt="n")
plot(plotData$DateTime, plotData$Sub_metering_1, type="l",
main="",xlab="", ylab="Energy sub metering", ylim=c(ymin, ymax), xaxt="n")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     xact = "n" to force hiding of x-labels
#     Plus set y range limits
# Note - x labels seemd to autodisplay to correct value
# However following code can be used to see any desired adte/time format
axis.POSIXct(1, plotData$DateTime, format="%a")
# Next we need to add additional plots - use par to suspend redrwaing plot
par(new=TRUE)
plot(plotData$Sub_metering_2, type="l", col="red",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
par(new=TRUE)
plot(plotData$Sub_metering_3, type="l", col="blue",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
#set back to standrad value of false
par(new=FALSE)
legend("topright", c("A","B","C"), col=c("black","red","blue"), lwd=1)
png(plotFileName, width=480, height=480) #Create PNG with desired height & width (not 480x480 is default so did not need to specify)
## ----------------------------------- Step 04: Generate Plot -----------------------------------
## In this example we will be sharing same plot for 3 graphs
## To do so, need to set y-range fixed for each graph, so compute min/max
ymin <- min(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
ymax <- max(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
plot(plotData$DateTime, plotData$Sub_metering_1, type="l",
main="",xlab="", ylab="Energy sub metering", ylim=c(ymin, ymax), xaxt="n")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     xact = "n" to force hiding of x-labels
#     Plus set y range limits
# Note - x labels seemd to autodisplay to correct value
# However following code can be used to see any desired adte/time format
axis.POSIXct(1, plotData$DateTime, format="%a")
# Next we need to add additional plots - use par to suspend redrwaing plot
par(new=TRUE)
plot(plotData$Sub_metering_2, type="l", col="red",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
par(new=TRUE)
plot(plotData$Sub_metering_3, type="l", col="blue",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
#set back to standrad value of false
par(new=FALSE)
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"), lwd=1)
#note: need to include lwd since lines
## ----------------------------------- Step 05: Clean-Up -----------------------------------
dev.off()   #close active graphic device pointing to png file
?legend
?par
par(mfrow=c(2,2)) #2x2 display fill row first
## ----------------------------------- Step 04-C: Generate Plots 1 & 2-----------------------------------
plot(plotData$DateTime, plotData$Global_active_power, type="l",
main="",xlab="", ylab="Global Active Power")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#Note: To make code easier for multiple plot example: using default dispaly of datetime as %a
plot(plotData$DateTime, plotData$Voltage, type="l",
main="",xlab="datetime", ylab="Voltage" )
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     Plus set y range limits
#Note: To make code easier for multiple plot example: using default dispaly of datetime as %a
## ----------------------------------- Step 04-C: Generate Plot 3-----------------------------------
## In this example we will be sharing same plot for 3 graphs
## To do so, need to set y-range fixed for each graph, so compute min/max
ymin <- min(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
ymax <- max(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
plot(plotData$DateTime, plotData$Sub_metering_1, type="l",
main="",xlab="", ylab="Energy sub metering", ylim=c(ymin, ymax))
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     Plus set y range limits
#Note: To make code easier for multiple plot example: using default dispaly of datetime as %a
# Next we need to add additional plots - use par to suspend redrwaing plot
par(new=TRUE)
plot(plotData$Sub_metering_2, type="l", col="red",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
par(new=TRUE)
plot(plotData$Sub_metering_3, type="l", col="blue",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
#set back to standrad value of false
par(new=FALSE)
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"), lwd=1, bty="n")
#Note: need to include lwd since lines
#     Also using bty ="n" to hide legend box
par(mfrow=c(2,2), margin=c(3, 3, 0, 0)) #2x2 display fill row first
## ----------------------------------- Step 04-C: Generate SubPlots 1 & 2-----------------------------------
plot(plotData$DateTime, plotData$Global_active_power, type="l",
main="",xlab="", ylab="Global Active Power")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#Note: To make code easier for multiple plot example: using default display of datetime as %a
#     Plus mimicing desired result so no xlabel
plot(plotData$DateTime, plotData$Voltage, type="l",
main="",xlab="datetime", ylab="Voltage" )
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     Plus set y range limits
#Note: To make code easier for multiple plot example: using default dispaly of datetime as %a
## ----------------------------------- Step 04-C: Generate Sub-Multi Plot 3-----------------------------------
## In this example we will be sharing same plot for 3 graphs
## To do so, need to set y-range fixed for each graph, so compute min/max
ymin <- min(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
ymax <- max(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
plot(plotData$DateTime, plotData$Sub_metering_1, type="l",
main="",xlab="", ylab="Energy sub metering", ylim=c(ymin, ymax))
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     Plus set y range limits
#Note: To make code easier for multiple plot example: using default dispaly of datetime as %a
# Next we need to add additional plots - use par to suspend redrwaing plot
par(new=TRUE)
plot(plotData$Sub_metering_2, type="l", col="red",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
par(new=TRUE)
plot(plotData$Sub_metering_3, type="l", col="blue",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
#set back to standrad value of false
par(new=FALSE)
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"), lwd=1, bty="n")
#Note: need to include lwd since lines
#     Also using bty ="n" to hide legend box
## ----------------------------------- Step 04-C: Generate Final SubPlot-----------------------------------
plot(plotData$DateTime, plotData$Global_reactive_power, type="l",
main="",xlab="datetime", ylab="Global_reactive_power")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#Note: To make code easier for multiple plot example: using default dispaly of datetime as %a
## ----------------------------------- Step 03: Init Graphic Device  & Layout-----------------------------------
png(plotFileName, width=480, height=480) #Create PNG with desired height & width (not 480x480 is default so did not need to specify)
par(mfrow=c(2,2), margin=c(3, 3, 0, 0)) #2x2 display fill row first
## ----------------------------------- Step 04-C: Generate SubPlots 1 & 2-----------------------------------
plot(plotData$DateTime, plotData$Global_active_power, type="l",
main="",xlab="", ylab="Global Active Power")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#Note: To make code easier for multiple plot example: using default display of datetime as %a
#     Plus mimicing desired result so no xlabel
plot(plotData$DateTime, plotData$Voltage, type="l",
main="",xlab="datetime", ylab="Voltage" )
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     Plus set y range limits
#Note: To make code easier for multiple plot example: using default dispaly of datetime as %a
## ----------------------------------- Step 04-C: Generate Sub-Multi Plot 3-----------------------------------
## In this example we will be sharing same plot for 3 graphs
## To do so, need to set y-range fixed for each graph, so compute min/max
ymin <- min(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
ymax <- max(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
plot(plotData$DateTime, plotData$Sub_metering_1, type="l",
main="",xlab="", ylab="Energy sub metering", ylim=c(ymin, ymax))
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     Plus set y range limits
#Note: To make code easier for multiple plot example: using default dispaly of datetime as %a
# Next we need to add additional plots - use par to suspend redrwaing plot
par(new=TRUE)
plot(plotData$Sub_metering_2, type="l", col="red",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
par(new=TRUE)
plot(plotData$Sub_metering_3, type="l", col="blue",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
#set back to standrad value of false
par(new=FALSE)
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"), lwd=1, bty="n")
#Note: need to include lwd since lines
#     Also using bty ="n" to hide legend box
## ----------------------------------- Step 04-C: Generate Final SubPlot-----------------------------------
plot(plotData$DateTime, plotData$Global_reactive_power, type="l",
main="",xlab="datetime", ylab="Global_reactive_power")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#Note: To make code easier for multiple plot example: using default dispaly of datetime as %a
## ----------------------------------- Step 05: Clean-Up -----------------------------------
dev.off()   #close active graphic device pointing to png file
plotFileName <- "plot4.png"
png(plotFileName, width=480, height=480) #Create PNG with desired height & width (not 480x480 is default so did not need to specify)
par(mfrow=c(2,2), margin=c(3, 3, 0, 0)) #2x2 display fill row first
## ----------------------------------- Step 04-C: Generate SubPlots 1 & 2-----------------------------------
plot(plotData$DateTime, plotData$Global_active_power, type="l",
main="",xlab="", ylab="Global Active Power")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#Note: To make code easier for multiple plot example: using default display of datetime as %a
#     Plus mimicing desired result so no xlabel
plot(plotData$DateTime, plotData$Voltage, type="l",
main="",xlab="datetime", ylab="Voltage" )
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     Plus set y range limits
#Note: To make code easier for multiple plot example: using default dispaly of datetime as %a
## ----------------------------------- Step 04-C: Generate Sub-Multi Plot 3-----------------------------------
## In this example we will be sharing same plot for 3 graphs
## To do so, need to set y-range fixed for each graph, so compute min/max
ymin <- min(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
ymax <- max(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
plot(plotData$DateTime, plotData$Sub_metering_1, type="l",
main="",xlab="", ylab="Energy sub metering", ylim=c(ymin, ymax))
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     Plus set y range limits
#Note: To make code easier for multiple plot example: using default dispaly of datetime as %a
# Next we need to add additional plots - use par to suspend redrwaing plot
par(new=TRUE)
plot(plotData$Sub_metering_2, type="l", col="red",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
par(new=TRUE)
plot(plotData$Sub_metering_3, type="l", col="blue",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
#set back to standrad value of false
par(new=FALSE)
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"), lwd=1, bty="n")
#Note: need to include lwd since lines
#     Also using bty ="n" to hide legend box
## ----------------------------------- Step 04-C: Generate Final SubPlot-----------------------------------
plot(plotData$DateTime, plotData$Global_reactive_power, type="l",
main="",xlab="datetime", ylab="Global_reactive_power")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#Note: To make code easier for multiple plot example: using default dispaly of datetime as %a
## ----------------------------------- Step 05: Clean-Up -----------------------------------
dev.off()   #close active graphic device pointing to png file
plotFileName <- "plot3.png"
## ----------------------------------- Step 03: Init Graphic Device -----------------------------------
png(plotFileName, width=480, height=480) #Create PNG with desired height & width (not 480x480 is default so did not need to specify)
## ----------------------------------- Step 04: Generate Plot -----------------------------------
## In this example we will be sharing same plot for 3 graphs
## To do so, need to set y-range fixed for each graph, so compute min/max
ymin <- min(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
ymax <- max(plotData$Sub_metering_1, plotData$Sub_metering_2, plotData$Sub_metering_3)
plot(plotData$DateTime, plotData$Sub_metering_1, type="l",
main="",xlab="", ylab="Energy sub metering", ylim=c(ymin, ymax), xaxt="n")
# Options used are lines (default black color)
#     blank title, overridding default x/y-label
#     xact = "n" to force hiding of x-labels
#     Plus set y range limits
# Note - x labels seemd to autodisplay to correct value
# However following code can be used to see any desired adte/time format
axis.POSIXct(1, plotData$DateTime, format="%a")
# Next we need to add additional plots - use par to suspend redrwaing plot
par(new=TRUE)
plot(plotData$Sub_metering_2, type="l", col="red",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
par(new=TRUE)
plot(plotData$Sub_metering_3, type="l", col="blue",
main="",xlab="", ylab="",  ylim=c(ymin, ymax), xaxt="n", yaxt="n")
#set back to standrad value of false
par(new=FALSE)
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"), lwd=1)
#note: need to include lwd since lines
## ----------------------------------- Step 05: Clean-Up -----------------------------------
dev.off()   #close active graphic device pointing to png file
